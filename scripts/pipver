#!/usr/bin/env python
# coding: utf-8

"""
pipver
author: John Shanahan <shanahan.jrs@gmail.com>

TODO:
  - Fix giant run on main()
  - git support
"""

from pipver.lib import *
from pipver.semanticversion import SemanticVersion

import click
from colorama import Fore, Style

import sys

# Set the green lambda to be used by each line
def lprint(to_print):
    print(Fore.GREEN + 'Î»' + Style.RESET_ALL + ' ' + to_print)

# inputs
#  - filename (look for if not specified)
#  - version (increment is not specified)
#  - major
#  - minor
#  - patch
#  - git (in a future release)

@click.command()
@click.option('--filepath', default=False, help='Name of file containing the version variable/string.')
@click.option('--version', default=False, help='SemVer string of the new version to use.')
@click.option('--major', default=False, help='Increment the version Major.')
@click.option('--minor', default=False, help='Increment the version Minor.')
@click.option('--patch', default=True, help='Increment the version Patch (This is the default).')
@click.option('--yes', default=False, help='Always answer Yes when prompted with a Y/n question.')
def main(filepath, version, major, minor, patch, yes):
    """
    main
    """
    lprint('inputs:')
    lprint('filepath: %s' % filepath)
    lprint('version: %s' % version)
    lprint('major: %s' % major)
    lprint('minor: %s' % minor)
    lprint('patch: %s' % patch)
    lprint('yes: %s' % yes)

    # Find current version
    lprint('Searching for version string...')
    if filepath:
        old_version_str = search_file_for_valid_semver(file)
        if not version:
            raise ValueError('No valid semver string found in file %s' % file)
    else:
        old_version_str, filepath = search_each_existing_file(
            search_for_possible_files()
        )
    
    old_version = SemanticVersion(old_version_str)
    lprint('Found current version: %s%s%s' % (Fore.CYAN, old_version, Style.RESET_ALL))

    # Now bump the version...
    if version:
        # If a --version string was specified use that
        if not is_valid_semver(version):
            lprint('WARNING: %s%s%s is not valid, use anyway?' % (Fore.RED, version, Style.RESET_ALL))
            if input('Keep? %s[yes]>%s ' % (Fore.YELLOW, Style.RESET_ALL)).lower() != 'yes':
                lprint('Exiting...')
                sys.exit(1)
        new_version = version
    else:
        # If a --version was not specified then use one of these
        lprint('No --version specified, generating one...')
        if major:
            new_version = old_version.increment_major()
        elif minor:
            new_version = old_version.increment_minor()
        elif patch:
            new_version = old_version.increment_patch()
        else:
            raise ValueError('No proper version argument was specified [--version, --major, --minor, --patch]')
    
    # New version string Ok?
    lprint('New version to be written: %s%s%s' % (Fore.CYAN, new_version, Style.RESET_ALL))

    if not yes:
        # Ask to use the new version string if they havent specified --yes
        if input('Keep? %s[yes]>%s ' % (Fore.YELLOW, Style.RESET_ALL)).lower() != 'yes':
            lprint('Exiting...')
            sys.exit(1)

    modify_file_with_new_version_string(filepath, old_version_str, new_version)

    lprint('Done!')

if __name__ == '__main__':
    main()
